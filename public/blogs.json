{"status":"ok","feed":{"url":"https://medium.com/feed/@@shahzaibshah0028","title":"Stories by Shahzaibshah on Medium","link":"https://medium.com/@shahzaibshah0028?source=rss-2ece59e046e3------2","author":"","description":"Stories by Shahzaibshah on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*0V2XT9fmfabfukTVGhdphQ.png"},"items":[{"title":"Django AI Assistant: A Game-Changer for Building Intelligent Applications","pubDate":"2024-08-25 15:07:37","link":"https://medium.com/@shahzaibshah0028/django-ai-assistant-a-game-changer-for-building-intelligent-applications-d58b2c4b4a3d?source=rss-2ece59e046e3------2","guid":"https://medium.com/p/d58b2c4b4a3d","author":"Shahzaibshah","thumbnail":"","description":"\n<p>Django AI Assistant: A Game-Changer for Building Intelligent Applications</p>\n<p>The rise of AI has brought about a new era of computing, where AI assistants are rapidly becoming the norm. These assistants enable developers to build applications that make smart decisions and provide personalized experiences. With the recent launch of the Django AI Assistant, integrating powerful Large Language Models (LLMs) with Django has never been easier. In this blog, we\u2019ll explore how Django AI Assistant works, its potential, and a step-by-step tutorial to help you get\u00a0started.</p>\n<h3>What is Django AI Assistant?</h3>\n<p>Django AI Assistant allows you to combine the power of LLMs with Django\u2019s productivity to create intelligent applications. These assistants can do more than just respond to user queries\u200a\u2014\u200athey can interact with your Django application, perform database queries, manage files, and even make external API\u00a0calls.</p>\n<p>The latest LLMs from major AI providers have introduced a \u201ckiller feature\u201d called Tool Calling. This feature enables AI models to call methods from Django\u2019s side, essentially allowing them to do anything a Django view can do. Whether it\u2019s querying the database, checking permissions, or managing files, Django AI Assistant makes it possible to supercharge your applications with LLM capabilities.</p>\n<h3>Potential Use\u00a0Cases</h3>\n<p>Here are some innovative ideas for how you can use Django AI Assistant in your applications:</p>\n<ul>\n<li>\n<strong>Movie Recommender Chatbot:</strong> Help users manage their movie backlogs with personalized recommendations.</li>\n<li>\n<strong>Autofill Forms:</strong> Automatically fill out forms based on user input or data retrieved from external\u00a0sources.</li>\n<li>\n<strong>Tailored Email Reminders:</strong> Send personalized email reminders considering users\u2019 activity or preferences.</li>\n<li>\n<strong>Real-Time Tourist Guide:</strong> Recommend nearby attractions to users based on their current location.</li>\n</ul>\n<h3>Tutorial: Getting Started with Django AI Assistant</h3>\n<p>In this tutorial, we\u2019ll walk through the steps to set up Django AI Assistant and create a simple AI Assistant that can fetch the weather for a given location.</p>\n<h4>Prerequisites</h4>\n<p>Before we begin, make sure you have Django AI Assistant properly configured as described in the Get Started guide. You\u2019ll also need an API key from a supported AI provider. In this tutorial, we\u2019ll use OpenAI\u2019s gpt-4o\u00a0model.</p>\n<h4>Step 1: Setting Up API\u00a0Keys</h4>\n<p>To get started, you\u2019ll need to set your API key as an environment variable. The easiest way to do this is by using a\u00a0.env file in your project's root directory. You can load these variables using the python-dotenv library.</p>\n<pre>OPENAI_API_KEY=your_openai_api_key_here</pre>\n<pre>Make sure you install python-dotenv if you haven't already:<br>pip install python-dotenv</pre>\n<h4>Step 2: Defining Your First AI Assistant</h4>\n<p>Next, you\u2019ll define your first AI Assistant. Create a file named ai_assistants.py in your Django app directory. In this file, define a class that inherits from AIAssistant. Provide an id, name, instructions, and a model name for the assistant.</p>\n<pre>python<br># myapp/ai_assistants.py<br><br>from django_ai_assistant import AIAssistant<br><br>class WeatherAIAssistant(AIAssistant):<br>    id = \"weather_assistant\"<br>    name = \"Weather Assistant\"<br>    instructions = \"You are a weather bot.\"<br>    model = \"gpt-4o\"p</pre>\n<h4>Step 3: Adding Tools to Your Assistant</h4>\n<p>Tools give your AI Assistant the ability to perform specific tasks. In this example, we\u2019ll add a tool that fetches the current weather for a given location. Use the @method_tool decorator to define a tool method in your assistant class.</p>\n<pre># myapp/ai_assistants.py<br><br>from django.utils import timezone<br>from django_ai_assistant import AIAssistant, method_tool<br>import json<br><br>class WeatherAIAssistant(AIAssistant):<br>    id = \"weather_assistant\"<br>    name = \"Weather Assistant\"<br>    instructions = \"You are a weather bot.\"<br>    model = \"gpt-4o\"<br><br>    def get_instructions(self):<br>        return f\"{self.instructions} Today is {timezone.now().isoformat()}.\"<br><br>    @method_tool<br>    def get_weather(self, location: str) -&gt; str:<br>        \"\"\"Fetch the current weather data for a location\"\"\"<br>        return json.dumps({<br>            \"location\": location,<br>            \"temperature\": \"25\u00b0C\",<br>            \"weather\": \"sunny\"<br>        })  # Placeholder for an actual weather API call</pre>\n<p>The get_weather method is now a tool that the AI Assistant can use to fetch weather data when the user asks for\u00a0it.</p>\n<h4>Step 4: Using Your AI Assistant</h4>\n<p>Once you\u2019ve defined your AI Assistant and added tools, you can start using it in your Django views or any other part of your application. Here\u2019s an example of how to use the WeatherAIAssistant in a Django\u00a0view:</p>\n<pre># myapp/views.py<br><br>from django.http import JsonResponse<br>from .ai_assistants import WeatherAIAssistant<br><br>def weather_view(request):<br>    assistant = WeatherAIAssistant()<br>    response = assistant.handle_request(\"What's the weather in New York City?\")<br>    return JsonResponse({\"response\": response})</pre>\n<p>When a user accesses this view, the AI Assistant will respond with the current weather in New York\u00a0City.</p>\n<h4>Advanced Tools and Custom\u00a0Logic</h4>\n<p>Django AI Assistant supports more advanced tools with complex parameters and custom Django logic. You can define tools that interact with the database, check user permissions, or even manage media files. Here\u2019s an example of a tool that retrieves issues assigned to the current\u00a0user:</p>\n<pre># myapp/ai_assistants.py<br><br>from django_ai_assistant import AIAssistant, method_tool<br>import json<br><br>class IssueManagementAIAssistant(AIAssistant):<br>    id = \"issue_mgmt_assistant\"<br>    name = \"Issue Management Assistant\"<br>    instructions = \"You are an issue management bot.\"<br>    model = \"gpt-4o\"<br><br>    @method_tool<br>    def get_current_user_assigned_issues(self) -&gt; str:<br>        \"\"\"Get the issues assigned to the current user\"\"\"<br>        return json.dumps({<br>            \"issues\": list(Issue.objects.filter(assignee=self._user).values())<br>        })</pre>\n<p>With this setup, your AI Assistant can now perform complex tasks like managing user-specific data or interacting with external APIs, making your Django applications more powerful and versatile.</p>\n<h3>Conclusion</h3>\n<p>Django AI Assistant opens up a world of possibilities for developers looking to integrate AI capabilities into their Django applications. By combining the power of LLMs with Django\u2019s robust framework, you can create intelligent, responsive, and personalized applications that provide a seamless experience for your\u00a0users.</p>\n<p>Whether you\u2019re building a simple chatbot or a complex data management system, Django AI Assistant provides the tools and flexibility you need to bring your ideas to life. Start experimenting with Django AI Assistant today and see how it can transform your projects.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d58b2c4b4a3d\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Django AI Assistant: A Game-Changer for Building Intelligent Applications</p>\n<p>The rise of AI has brought about a new era of computing, where AI assistants are rapidly becoming the norm. These assistants enable developers to build applications that make smart decisions and provide personalized experiences. With the recent launch of the Django AI Assistant, integrating powerful Large Language Models (LLMs) with Django has never been easier. In this blog, we\u2019ll explore how Django AI Assistant works, its potential, and a step-by-step tutorial to help you get\u00a0started.</p>\n<h3>What is Django AI Assistant?</h3>\n<p>Django AI Assistant allows you to combine the power of LLMs with Django\u2019s productivity to create intelligent applications. These assistants can do more than just respond to user queries\u200a\u2014\u200athey can interact with your Django application, perform database queries, manage files, and even make external API\u00a0calls.</p>\n<p>The latest LLMs from major AI providers have introduced a \u201ckiller feature\u201d called Tool Calling. This feature enables AI models to call methods from Django\u2019s side, essentially allowing them to do anything a Django view can do. Whether it\u2019s querying the database, checking permissions, or managing files, Django AI Assistant makes it possible to supercharge your applications with LLM capabilities.</p>\n<h3>Potential Use\u00a0Cases</h3>\n<p>Here are some innovative ideas for how you can use Django AI Assistant in your applications:</p>\n<ul>\n<li>\n<strong>Movie Recommender Chatbot:</strong> Help users manage their movie backlogs with personalized recommendations.</li>\n<li>\n<strong>Autofill Forms:</strong> Automatically fill out forms based on user input or data retrieved from external\u00a0sources.</li>\n<li>\n<strong>Tailored Email Reminders:</strong> Send personalized email reminders considering users\u2019 activity or preferences.</li>\n<li>\n<strong>Real-Time Tourist Guide:</strong> Recommend nearby attractions to users based on their current location.</li>\n</ul>\n<h3>Tutorial: Getting Started with Django AI Assistant</h3>\n<p>In this tutorial, we\u2019ll walk through the steps to set up Django AI Assistant and create a simple AI Assistant that can fetch the weather for a given location.</p>\n<h4>Prerequisites</h4>\n<p>Before we begin, make sure you have Django AI Assistant properly configured as described in the Get Started guide. You\u2019ll also need an API key from a supported AI provider. In this tutorial, we\u2019ll use OpenAI\u2019s gpt-4o\u00a0model.</p>\n<h4>Step 1: Setting Up API\u00a0Keys</h4>\n<p>To get started, you\u2019ll need to set your API key as an environment variable. The easiest way to do this is by using a\u00a0.env file in your project's root directory. You can load these variables using the python-dotenv library.</p>\n<pre>OPENAI_API_KEY=your_openai_api_key_here</pre>\n<pre>Make sure you install python-dotenv if you haven't already:<br>pip install python-dotenv</pre>\n<h4>Step 2: Defining Your First AI Assistant</h4>\n<p>Next, you\u2019ll define your first AI Assistant. Create a file named ai_assistants.py in your Django app directory. In this file, define a class that inherits from AIAssistant. Provide an id, name, instructions, and a model name for the assistant.</p>\n<pre>python<br># myapp/ai_assistants.py<br><br>from django_ai_assistant import AIAssistant<br><br>class WeatherAIAssistant(AIAssistant):<br>    id = \"weather_assistant\"<br>    name = \"Weather Assistant\"<br>    instructions = \"You are a weather bot.\"<br>    model = \"gpt-4o\"p</pre>\n<h4>Step 3: Adding Tools to Your Assistant</h4>\n<p>Tools give your AI Assistant the ability to perform specific tasks. In this example, we\u2019ll add a tool that fetches the current weather for a given location. Use the @method_tool decorator to define a tool method in your assistant class.</p>\n<pre># myapp/ai_assistants.py<br><br>from django.utils import timezone<br>from django_ai_assistant import AIAssistant, method_tool<br>import json<br><br>class WeatherAIAssistant(AIAssistant):<br>    id = \"weather_assistant\"<br>    name = \"Weather Assistant\"<br>    instructions = \"You are a weather bot.\"<br>    model = \"gpt-4o\"<br><br>    def get_instructions(self):<br>        return f\"{self.instructions} Today is {timezone.now().isoformat()}.\"<br><br>    @method_tool<br>    def get_weather(self, location: str) -&gt; str:<br>        \"\"\"Fetch the current weather data for a location\"\"\"<br>        return json.dumps({<br>            \"location\": location,<br>            \"temperature\": \"25\u00b0C\",<br>            \"weather\": \"sunny\"<br>        })  # Placeholder for an actual weather API call</pre>\n<p>The get_weather method is now a tool that the AI Assistant can use to fetch weather data when the user asks for\u00a0it.</p>\n<h4>Step 4: Using Your AI Assistant</h4>\n<p>Once you\u2019ve defined your AI Assistant and added tools, you can start using it in your Django views or any other part of your application. Here\u2019s an example of how to use the WeatherAIAssistant in a Django\u00a0view:</p>\n<pre># myapp/views.py<br><br>from django.http import JsonResponse<br>from .ai_assistants import WeatherAIAssistant<br><br>def weather_view(request):<br>    assistant = WeatherAIAssistant()<br>    response = assistant.handle_request(\"What's the weather in New York City?\")<br>    return JsonResponse({\"response\": response})</pre>\n<p>When a user accesses this view, the AI Assistant will respond with the current weather in New York\u00a0City.</p>\n<h4>Advanced Tools and Custom\u00a0Logic</h4>\n<p>Django AI Assistant supports more advanced tools with complex parameters and custom Django logic. You can define tools that interact with the database, check user permissions, or even manage media files. Here\u2019s an example of a tool that retrieves issues assigned to the current\u00a0user:</p>\n<pre># myapp/ai_assistants.py<br><br>from django_ai_assistant import AIAssistant, method_tool<br>import json<br><br>class IssueManagementAIAssistant(AIAssistant):<br>    id = \"issue_mgmt_assistant\"<br>    name = \"Issue Management Assistant\"<br>    instructions = \"You are an issue management bot.\"<br>    model = \"gpt-4o\"<br><br>    @method_tool<br>    def get_current_user_assigned_issues(self) -&gt; str:<br>        \"\"\"Get the issues assigned to the current user\"\"\"<br>        return json.dumps({<br>            \"issues\": list(Issue.objects.filter(assignee=self._user).values())<br>        })</pre>\n<p>With this setup, your AI Assistant can now perform complex tasks like managing user-specific data or interacting with external APIs, making your Django applications more powerful and versatile.</p>\n<h3>Conclusion</h3>\n<p>Django AI Assistant opens up a world of possibilities for developers looking to integrate AI capabilities into their Django applications. By combining the power of LLMs with Django\u2019s robust framework, you can create intelligent, responsive, and personalized applications that provide a seamless experience for your\u00a0users.</p>\n<p>Whether you\u2019re building a simple chatbot or a complex data management system, Django AI Assistant provides the tools and flexibility you need to bring your ideas to life. Start experimenting with Django AI Assistant today and see how it can transform your projects.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d58b2c4b4a3d\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["chatbots","python","ai","django","llm"]}]}